---
import { lucia } from "../../lib/lucia";
import Layout from "../../layouts/Layout.astro";
import DataTable from "@/components/site/FinesTable/DataTable";
import type { TotalFines } from "@/shared/types";
import { db, Players, Fines, Payments, eq } from "astro:db";
const players = await db.select().from(Players);
const fines = await db.select().from(Fines);
const payments = await db.select().from(Payments);
const sessionId = Astro.cookies.get("session");

if (!sessionId) {
  return Astro.redirect("/fines-master/login?message=Please login to continue");
}

const { session, user } = await lucia.validateSession(sessionId.value);

if (!session || !user) {
  return Astro.redirect("/fines-master/login?message=Please login to continue");
}

const playerFines: TotalFines[] = players.map(({ name, id, isPeanut }) => {
  const playerFines: any[] = fines.filter((fine: any) => fine.playerId === id);
  const playerPayments: any[] = payments.filter(
    (payment: any) => payment.playerId === id
  );
  const totalFines: number = playerFines.reduce(
    (total: number, fine: any) => total + fine.amount,
    0
  );
  const totalPayments: number = playerPayments.reduce(
    (total: number, payment: any) => total + payment.amount,
    0
  );
  return {
    amountPaid: totalPayments,
    amountFined: totalFines,
    name: name,
    isPeanut: isPeanut ? true : false,
    playerId: id,
  };
});

if (Astro.request.method === "POST") {
  const body = await Astro.request.formData();
  const name: string = body.get("name")?.toString()!;
  let playerId: number = Number(body.get("playerId"));
  const isPeanut: boolean = body.get("isPeanut") === "on" ? true : false;
  const fineAmount: number = Number(body.get("fineAmount"));

  if (!name || typeof name !== "string" || name === "") {
    return new Response("Invalid", {
      status: 400,
    });
  }

  if (isPeanut) {
    await db
      .update(Players)
      .set({ isPeanut: false })
      .where(eq(Players.isPeanut, true));
  }

  if (!playerId && name) {
    // create new player before continuing
    let newPlayer = await db
      .insert(Players)
      .values([{ name: name, isPeanut: isPeanut }])
      .returning();

    playerId = await newPlayer[0].id;
  }

  if (playerId) {
    await db.insert(Fines).values([
      {
        amount: fineAmount,
        playerId: playerId,
      },
    ]);
  }

  return Astro.redirect("/fines-master");
}
---

<Layout title="fines master">
  <DataTable data={playerFines} isAdmin={true} client:load />
</Layout>
